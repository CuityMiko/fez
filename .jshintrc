{
    /* ==================================
     * @ 2017 FEZ 前端模块工程自动化构建工具
     * https://github.com/furic-zhao/fez
     * ================================== */

    // JSHint Default Configuration File (as on JSHint website)
    // See http://jshint.com/docs/ for more details
    /**
     * JSHint中断扫描前允许的最大错误数
     * 因为最终我们需要清零JSHint报错的，所以这个值用在对已有项目的扫描中。
     */
    "maxerr": 50, // {int} Maximum error before stopping

    /*****************************
     * 增强参数(Enforcing Options)
     * 当下列选项设置为 true 时，JSHint 会基于这些选项对代码产生更多的警告信息。
     *****************************/

    /**
     * 这个选项禁止在 JavaScript 中使用位运算符，如 ^ (XOR)，| (OR)。在 JavaScript 中位运算很少见，& 与 && 经常容易混淆，大多数情况下应该使用 &&。
     */
    "bitwise": true, // true: 禁用位运算符 (&, |, ^, etc.)

    /**
     * 这是条最佳实践，关键不在于采用什么样的命名规则(比如纯小写配下划线)，而在于要有规则，在代码中看到不同的命名规则会让人头痛不已。
     */
    "camelcase": false, // true: 使用驼峰命名(camelCase)或全大写下划线命名(UPPER_CASE)

    /**
     * if和while等语句中使用{}来明确代码块
     * while (day)
     *     shuffle();
     *     sleep();
     * 虽然缩进表示两条语句都在循环中，但事实却是只有一句循环。
     */
    "curly": true, // true: 循环或者条件语句必须使用花括号包围

    /**
     * 使用===和!==替代==和!=
     * ==和!=比较时会对前后元素进行自动转义，作为读者，需要动脑筋想这里可能有什么样的转义规则，加重负担；作为作者，其实很可能是不确定这段代码运行时是怎么样的，想要偷懒。
     */
    "eqeqeq": true, // true: 强制使用三等号

    /*
     * 在for in循环中使用Object.prototype.hasOwnProperty()来过滤原型链中的属性
     * for (key in obj) {
     * if (obj.hasOwnProperty(key)) {
     *     }
     * }
     * for in遍历对象属性的时候，包括继承自原型链的属性，hasOwnProperty可以来判断一个属性是否是对象本身的属性而不是继承得来的。
     */
    "forin": true,

    /**
     * 禁止复写原生对象(如Array, Date)的原型
     * Array.prototype.count = function (value) { return 4; };
     * // -> Warning: Extending prototype of native object: 'Array'.
     * 为原生对象添加属性确实看上去很方便，但也带来了潜在的问题，一是如果项目中有多处为同一个对象添加了同样的属性（或函数），则很可能产生冲突；二是如果某段逻辑依赖于对象属性遍历，则可能产生错误。
     */
    "freeze": true, // true: 禁止重写原生对象的原型，比如 Array，Date

    /**
     * 匿名函数调用必须
     * (function() {
     *   // body
     * }());
     * 而不是
     * (function() {
     *   // body
     * })();
     * 这是为了表明，表达式的值是函数的结果，而不是函数本身。
     */
    "immed": false, // true: Require immediate invocations to be wrapped in parens e.g. `(function () { } ());`

    /**
     * 变量定义前禁止使用
     * JS的变量是“函数级作用域”，而不是通常所见的“块级作用域”，简单说
     * function sum(numbers) {
     *    for (var i = 0, n = numbers.length; i < n; i++) {
     *       var sum = sum + numbers[i];
     *    }
     *    return sum;
     * }
     * 相当于
     * function sum(numbers) {
     *    var i, n, sum;
     *    for (i = 0, n = numbers.length; i < n; i++) {
     *       sum = sum + numbers[i];
     *    }
     *    return sum;
     * }
     * 这个行为叫做“变量声明提升”，为了不产生混淆，这条规则建议函数都使用第二种写法。
     */
    "latedef": false, // true: Require variables/functions to be defined before being used

    /**
     * 构造函数名首字母必须大写,这条最佳实践是为了方便区分构造函数和普通函数，这样在直接调用大写字母开头的函数时，使用者就会想想是不是自己写错了。不通过new而直接调用构造函数，会使得构造函数中的this指向global对象，从而产生错误。
     * PS. 有些高手可以通过在构造函数中判断this的指向来判断是否重新new自身，从而让构造函数也能直接调用产生新对象。但这有些高深，加重开发人员和使用人员的负担，也不利于统一编码风格。
     */
    "newcap": false, // true: 构造器函数首字母大写 `new F()`

    /**
     * 禁止使用arguments.caller和arguments.callee
     * 一方面这两个属性不是所有的浏览器都支持，另一方面这两个属性的使用会导致JS引擎很难优化代码，在未来的JS规范中会被去掉，所以不建议使用。
     */
    "noarg": true, // true: 禁止使用 arguments.caller 和 arguments.callee，未来会被弃用， ECMAScript 5 禁止使用 arguments.callee

    /**
     * 禁止出现空的代码块
     * 空的代码块并不是有害的，但是出现的话我们需要考虑下为什么。
     */
    "noempty": true, // true: Prohibit use of empty blocks

    /**
     * 禁止”non-breaking whitespace”
     * 这是Mac键盘在某种情况下可以键入的字符，据说会破坏非UTF8编码的页面。
     */
    "nonbsp": true, // true: Prohibit "non-breaking whitespace" characters.

    /**
     * 禁止使用构造器
     * new MyConstructor();
     * 构造一个对象，却不给它赋值到某个变量，只是利用构造函数中的逻辑。这个行为完全可以用一个普通函数来完成，不应该借助构造器。
     */
    "nonew": false, // true: Prohibit use of constructors for side-effects (without assignment)

    /**
     * 禁止使用++和–
     * 不是很赞成把这个选项打成true，不过乱用自增/自减确实也会带来阅读上的障碍。
     */
    "plusplus": false, // true: Prohibit use of `++` and `--`

    /**
     * 统一使用单引号或双引号
     * 这个最佳实践要求代码风格统一，我比较喜欢统一成单引号。
     * 这是为什么规定最佳实践的一个好例子，在写到字符串的时候我们就不用考虑使用单引号好还是用双引号好，就都用单引号，这在一定程度上也减轻了我们的思考负担。
     */
    "quotmark": false, // Quotation mark consistency:
    //   false    : do nothing (default)
    //   true     : ensure whatever is used is consistent
    //   "single" : require single quotes
    //   "double" : require double quotes

    /**
     * 禁止使用不在全局变量列表中的未定义的变量
     * function test() {
     *     var myVar = 'Hello, World';
     *     console.log(myvar); // Oops, typoed here. JSHint with undef will complain
     * }
     * 如果本地作用域里的变量没有使用var来声明，则会被放到全局作用域下面，众所周知，全局变量时罪恶的源泉。
     */
    "undef": true, // true: （变量未定义）Require all non-global variables to be declared (prevents global leaks)

    /**
     * 禁止定义变量却不使用
     * function test(a, b) {
     *     var c, d = 2;
     *     return a + d;
     * }
     * test(1, 2);
     * // Line 1: 'b' was defined but never used.
     * // Line 2: 'c' was defined but never used.
     * 这种变量通常是写作过程中遗留下来的垃圾，需要及时清理掉。
     */
    "unused": true, // （变量未使用）Unused variables:
    //   true     : all variables, last function parameter
    //   "vars"   : all variables only
    //   "strict" : all variables, all function parameters

    /**
     * 强制使用ES5的严格模式
     * Strict Mode是对JS用法的一些限制，过滤掉了容易出错的特性和不容易优化的特性。
     * 通过在函数开头处加入’use strict’;来触发严格模式，不要在文件头部加入，因为在JS链接的时候很可能就失效了。
     */
    "strict": false, // true: (严格模式)Requires all functions run in ES5 Strict Mode

    /**
     * 函数可以接受的最大参数数量
     * 函数参数数量应该控制在3个以内，超出则可能造成使用困难，比如需要记忆参数顺序，难以设定默认值等。另外，在JS中可以很方便的使用参数对象来封装多个参数。
     */
    "maxparams": false, // (最多参数个数){int} Max number of formal params allowed per function

    /**
     * 代码块中可以嵌入{}的最大深度
     */
    "maxdepth": false, // (最大嵌套深度){int} Max depth of nested blocks (within functions)

    /**
     * 函数中最大语句数
     */
    "maxstatements": false, // {int} Max number statements per function

    /**
     * 函数的最大圈复杂度
     */
    "maxcomplexity": false, // {int} Max cyclomatic complexity per function

    /**
     * 一行中最大字符数
     * 这个是为了减轻代码阅读的困难，简单说就是不要折行。
     * 上面四个参数最终都是为了减小代码的复杂程度，简单轻巧的代码片段更容易阅读和维护。
     */
    "maxlen": false, // {int} Max number of characters per line

    /**
     *  禁止使用var定义变量，仅允许let和const
     */
    "varstmt": false, // true: Disallow any var statements. Only `let` and `const` are allowed.

    /****************************
     * 松弛参数(Relaxing Options)
     ****************************/

    /**
     * 允许省略分号
     * JavaScript的语法允许自动补全分号，但是这一特性也会造成难以定位的错误，所以建议写代码时不要省略分号。
     */
    "asi": false, // true: Tolerate Automatic Semicolon Insertion (no semicolons)

    /**
     * 允许在if，for，while语句中使用赋值
     * 在条件语句中使用赋值经常是笔误if (a = 10) {}，但是牛人(boss)可以把这个特性用的很好，我们作为普通人就算了。
     */
    "boss": false, // true: Tolerate assignments where comparisons would be expected

    /**
     * 允许debugger语句
     */
    "debug": false, // true: Allow debugger statements e.g. browser breakpoints.

    /**
     * 允许==null
     * ==null通常用来比较=== null        === undefined
     */
    "eqnull": false, // true: Tolerate use of `== null`

    /**
     * 指定代码必须遵守的ECMAScript版本
     */
    "esversion": 6, // {int} Specify the ECMAScript version to which the code must adhere.

    /**
     * 声明代码使用mozilla JavaScript 扩展。
     */
    "moz": false, // true: Allow Mozilla specific syntax (extends and overrides esnext features)
    // (ex: `for each`, multiple try/catch, function expression…)

    /**
     * 允许使用eval
     * eval有“注入攻击”的危险，另一方面也不利于JS引擎优化代码，所以尽量不要使用。
     */
    "evil": false, // true: Tolerate use of `eval` and `new Function()`

    /**
     * 允许应该出现赋值或函数调用的地方使用表达式
     */
    "expr": false, // true: Tolerate `ExpressionStatement` as Programs

    /**
     * 允许在控制体内定义变量而在外部使用
     * function test() {
     *     if (true) {
     *         var x = 0;
     *     }
     *     x += 1; // Default: 'x' used out of scope.
     *             // No warning when funcscope:true
     * }
     * 虽然“变量声明提升”使得上面的代码可以运行通过，但是读者还是会感到头晕。
     */
    "funcscope": false, // true: Tolerate defining variables inside control statements

    /**
     * 允许全局严格模式
     * 在strict中解释了，’use strict’;放在全局域可能造成JS文件链接错误。
     */
    "globalstrict": false, // true: Allow global "use strict" (also enables 'strict')

    /**
     * 允许__iterator__
     * 不是所有的浏览器都支持__iterator__。
     */
    "iterator": false, // true: Tolerate using the `__iterator__` property

    /**
     * 允许单行控制块省略分号
     * var name = (function() { return 'Anton' }());
     */
    "lastsemic": false, // true: Tolerate omitting a semicolon for the last statement of a 1-line block

    /**
     * 允许不安全的行中断(与laxcomma配合使用)
     */
    "laxbreak": false, // true: Tolerate possibly unsafe line breakings

    /**
     * 允许逗号开头的编码样式
     * var obj = {
     *     name: 'Anton'
     *   , handle: 'valueof'
     *   , role: 'SW Engineer'
     * };
     */
    "laxcomma": false, // true: Tolerate comma-first style coding

    /**
     * 允许循环中定义函数
     * 在循环中定义函数经常会导致错误：
     * var nums = [];
     * for (var i = 0; i < 10; i++) {
     *     nums[i] = function (j) {
     *         return i + j;
     *     };
     * }
     * nums[0](2); // Prints 12 instead of 2
     * 错误的根源在于function(j)中的i是对循环中的i的引用，而不是赋值。所以在最终函数执行时，i的值是10。
     * 修改的方法是使用闭包：
     * var nums = [];
     * for (var i = 0; i < 10; i++) {
     *     (function (i) {
     *         nums[i] = function (j) {
     *             return i + j;
     *         };
     *     }(i));
     * }
     */
    "loopfunc": false, // true: Tolerate functions being defined in loops

    /**
     * 允许多行字符串
     */
    "multistr": false, // true: Tolerate multi-line strings

    /**
     * 允许发生器中没有yield语句
     */
    "noyield": false, // true: Tolerate generator functions with no yield statement in them.

    /**
     * 允许非法的typeof操作
     */
    "notypeof": false, // true: Tolerate invalid typeof operator values

    /**
     * 允许 proto
     * 不是所有的浏览器都支持__proto__.
     */
    "proto": false, // true: Tolerate using the `__proto__` property

    /**
     * 允许以脚本为目标的网址
     */
    "scripturl": false, // true: Tolerate script-targeted URLs

    /**
     * 允许变量shadow
     * function test() {
     *     var x = 10;
     *     if (true) {
     *         var x = 20;
     *     }
     *     return x;
     * }
     * 基于“函数作用域”，多次定义变量和单次定义是没有区别的，但是会造成阅读障碍。
     */
    "shadow": false, // true: Allows re-define variables later in code e.g. `var x=1; x=2;`

    /**
     * 允许person[‘name’]
     * JSHint推荐使用person.name代替person[‘name’]
     */
    "sub": false, // true: Tolerate using `[]` notation when it can still be expressed in dot notation

    /**
     * 允许new function() {…}和new Object;
     */
    "supernew": false, // true: Tolerate `new function () { ... };` and `new Object;`

    /**
     * 允许严格模式下在非构造函数中使用this
     */
    "validthis": false, // true: Tolerate using this in a non-constructor function

    // Environments
    /********************************
     * 下列选项是关于一些预定义的全局变量。
     ********************************/
    "browser": true, // Web Browser (window, document, etc)
    "browserify": true, // Browserify (node.js code in the browser)
    "couch": false, // CouchDB
    "devel": true, // Development/debugging (alert, confirm, etc)
    "dojo": false, // Dojo Toolkit
    "jasmine": false, // Jasmine
    "jquery": true, // jQuery
    "mocha": true, // Mocha
    "mootools": false, // MooTools
    "node": true, // Node.js
    "nonstandard": false, // Widely adopted globals (escape, unescape, etc)
    "phantom": false, // PhantomJS
    "prototypejs": false, // Prototype and Scriptaculous
    "qunit": false, // QUnit
    "rhino": false, // Rhino
    "shelljs": false, // ShellJS
    "typed": false, // Globals for typed array constructions
    "worker": false, // Web Workers
    "wsh": false, // Windows Scripting Host
    "yui": false, // Yahoo User Interface

    // Custom Globals
    "globals": {} // additional predefined global variables
}
